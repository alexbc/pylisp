INFO:eval:Evaling (setq x 10)
INFO:eval:Have variables {}
INFO:eval:function = setq
INFO:eval:Found in function table
INFO:eval:args = ['x', '10']
INFO:eval:Evaling 10
INFO:eval:Have variables {}
INFO:eval:Found int 10
INFO:eval:eval returns 10 
INFO:eval:Evaling (+ x 2)
INFO:eval:Have variables {'x': 10}
INFO:eval:function = +
INFO:eval:Found in function table
INFO:eval:Evaling x
INFO:eval:Have variables {'x': 10}
INFO:eval:Found variable x = 10
INFO:eval:Evaling 2
INFO:eval:Have variables {'x': 10}
INFO:eval:Found int 2
INFO:eval:args = [10, 2]
INFO:eval:eval returns 12 
INFO:eval:Evaling (println (+ x 2))
INFO:eval:Have variables {'x': 10}
INFO:eval:function = println
INFO:eval:Found in function table
INFO:eval:Evaling (+ x 2)
INFO:eval:Have variables {'x': 10}
INFO:eval:function = +
INFO:eval:Found in function table
INFO:eval:Evaling x
INFO:eval:Have variables {'x': 10}
INFO:eval:Found variable x = 10
INFO:eval:Evaling 2
INFO:eval:Have variables {'x': 10}
INFO:eval:Found int 2
INFO:eval:args = [10, 2]
INFO:eval:eval returns 12 
INFO:eval:args = [12]
INFO:ulisp_core:Printed [12]
INFO:eval:eval returns None 
INFO:eval:Evaling (setq myclosure (let y 2 (lambda x (+ x y))))
INFO:eval:Have variables {'x': 10}
INFO:eval:function = setq
INFO:eval:Found in function table
INFO:eval:args = ['myclosure', '(let y 2 (lambda x (+ x y)))']
INFO:eval:Evaling (let y 2 (lambda x (+ x y)))
INFO:eval:Have variables {'x': 10}
INFO:eval:function = let
INFO:eval:Found in function table
INFO:eval:args = ['y', '2', '(lambda x (+ x y))']
INFO:closure:Variables = {'x': 10}
INFO:closure:closures = {0: {'x': 10}, 47416: {'x': 10}}
INFO:closure:Currentclosure = 47416
INFO:closure:Closurestack = [0, 47416]
INFO:eval:Evaling 2
INFO:eval:Have variables {'x': 10}
INFO:eval:Found int 2
INFO:eval:Evaling (lambda x (+ x y))
INFO:eval:Have variables {'y': 2, 'x': 10}
INFO:eval:function = lambda
INFO:eval:Found in function table
INFO:eval:args = ['x', '(+ x y)']
INFO:eval:eval returns <bound method lambdafunction.run of <__main__.lambdafunction instance at 0xb7d40d0c>> 
INFO:closure:Variables = {'y': 2, 'x': 10}
INFO:closure:closures = {0: {'x': 10}, 47416: {'y': 2, 'x': 10}}
INFO:closure:Currentclosure = 47416
INFO:closure:Closurestack = [0, 47416]
INFO:eval:eval returns <bound method lambdafunction.run of <__main__.lambdafunction instance at 0xb7d40d0c>> 
INFO:eval:eval returns <bound method lambdafunction.run of <__main__.lambdafunction instance at 0xb7d40d0c>> 
INFO:eval:Evaling (myclosure 5)
INFO:eval:Have variables {'myclosure': <bound method lambdafunction.run of <__main__.lambdafunction instance at 0xb7d40d0c>>, 'x': 10}
INFO:eval:function = myclosure
INFO:eval:Evaling myclosure
INFO:eval:Have variables {'myclosure': <bound method lambdafunction.run of <__main__.lambdafunction instance at 0xb7d40d0c>>, 'x': 10}
INFO:eval:Found variable myclosure = <bound method lambdafunction.run of <__main__.lambdafunction instance at 0xb7d40d0c>>
INFO:eval:Evaling myclosure
INFO:eval:Have variables {'myclosure': <bound method lambdafunction.run of <__main__.lambdafunction instance at 0xb7d40d0c>>, 'x': 10}
INFO:eval:Found variable myclosure = <bound method lambdafunction.run of <__main__.lambdafunction instance at 0xb7d40d0c>>
INFO:eval:Is a lambda function
INFO:eval:Evaling 5
INFO:eval:Have variables {'myclosure': <bound method lambdafunction.run of <__main__.lambdafunction instance at 0xb7d40d0c>>, 'x': 10}
INFO:eval:Found int 5
INFO:eval:args = [5]
INFO:closure:Variables = {'myclosure': <bound method lambdafunction.run of <__main__.lambdafunction instance at 0xb7d40d0c>>, 'x': 10}
INFO:closure:closures = {0: {'myclosure': <bound method lambdafunction.run of <__main__.lambdafunction instance at 0xb7d40d0c>>, 'x': 10}, 47416: {'y': 2, 'x': 10}}
INFO:closure:Currentclosure = 0
INFO:closure:Closurestack = []
INFO:closure:Variables = {'myclosure': <bound method lambdafunction.run of <__main__.lambdafunction instance at 0xb7d40d0c>>, 'x': 10}
INFO:closure:closures = {0: {'myclosure': <bound method lambdafunction.run of <__main__.lambdafunction instance at 0xb7d40d0c>>, 'x': 10}, 47416: {'y': 2, 'x': 10}}
INFO:closure:Currentclosure = 0
INFO:closure:Closurestack = []
INFO:closure:Variables = {'y': 2, 'x': 10}
INFO:closure:closures = {0: {'myclosure': <bound method lambdafunction.run of <__main__.lambdafunction instance at 0xb7d40d0c>>, 'x': 10}, 47416: {'y': 2, 'x': 10}, 12091: {'y': 2, 'x': 10}}
INFO:closure:Currentclosure = 12091
INFO:closure:Closurestack = [12091]
INFO:eval:Evaling (+ x y)
INFO:eval:Have variables {'y': 2, 'x': 5}
INFO:eval:function = +
INFO:eval:Found in function table
INFO:eval:Evaling x
INFO:eval:Have variables {'y': 2, 'x': 5}
INFO:eval:Found variable x = 5
INFO:eval:Evaling y
INFO:eval:Have variables {'y': 2, 'x': 5}
INFO:eval:Found variable y = 2
INFO:eval:args = [5, 2]
INFO:eval:eval returns 7 
INFO:eval:eval returns 7 
INFO:eval:Evaling (myclosure 2)
INFO:eval:Have variables {'myclosure': <bound method lambdafunction.run of <__main__.lambdafunction instance at 0xb7d40d0c>>, 'x': 10}
INFO:eval:function = myclosure
INFO:eval:Evaling myclosure
INFO:eval:Have variables {'myclosure': <bound method lambdafunction.run of <__main__.lambdafunction instance at 0xb7d40d0c>>, 'x': 10}
INFO:eval:Found variable myclosure = <bound method lambdafunction.run of <__main__.lambdafunction instance at 0xb7d40d0c>>
INFO:eval:Evaling myclosure
INFO:eval:Have variables {'myclosure': <bound method lambdafunction.run of <__main__.lambdafunction instance at 0xb7d40d0c>>, 'x': 10}
INFO:eval:Found variable myclosure = <bound method lambdafunction.run of <__main__.lambdafunction instance at 0xb7d40d0c>>
INFO:eval:Is a lambda function
INFO:eval:Evaling 2
INFO:eval:Have variables {'myclosure': <bound method lambdafunction.run of <__main__.lambdafunction instance at 0xb7d40d0c>>, 'x': 10}
INFO:eval:Found int 2
INFO:eval:args = [2]
INFO:closure:Variables = {'myclosure': <bound method lambdafunction.run of <__main__.lambdafunction instance at 0xb7d40d0c>>, 'x': 10}
INFO:closure:closures = {0: {'myclosure': <bound method lambdafunction.run of <__main__.lambdafunction instance at 0xb7d40d0c>>, 'x': 10}, 47416: {'y': 2, 'x': 10}, 12091: {'y': 2, 'x': 5}}
INFO:closure:Currentclosure = 0
INFO:closure:Closurestack = []
INFO:closure:Variables = {'myclosure': <bound method lambdafunction.run of <__main__.lambdafunction instance at 0xb7d40d0c>>, 'x': 10}
INFO:closure:closures = {0: {'myclosure': <bound method lambdafunction.run of <__main__.lambdafunction instance at 0xb7d40d0c>>, 'x': 10}, 47416: {'y': 2, 'x': 10}, 12091: {'y': 2, 'x': 5}}
INFO:closure:Currentclosure = 0
INFO:closure:Closurestack = []
INFO:closure:Variables = {'y': 2, 'x': 10}
INFO:closure:closures = {0: {'myclosure': <bound method lambdafunction.run of <__main__.lambdafunction instance at 0xb7d40d0c>>, 'x': 10}, 47416: {'y': 2, 'x': 10}, 12091: {'y': 2, 'x': 5}, 38367: {'y': 2, 'x': 10}}
INFO:closure:Currentclosure = 38367
INFO:closure:Closurestack = [38367]
INFO:eval:Evaling (+ x y)
INFO:eval:Have variables {'y': 2, 'x': 2}
INFO:eval:function = +
INFO:eval:Found in function table
INFO:eval:Evaling x
INFO:eval:Have variables {'y': 2, 'x': 2}
INFO:eval:Found variable x = 2
INFO:eval:Evaling y
INFO:eval:Have variables {'y': 2, 'x': 2}
INFO:eval:Found variable y = 2
INFO:eval:args = [2, 2]
INFO:eval:eval returns 4 
INFO:eval:eval returns 4 
